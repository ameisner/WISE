;+
; NAME:
;   wise_pairwise_compare
;
; PURPOSE:
;   Pairwise comparisons to measure image variance wrt neighbors
;
; CALLING SEQUENCE:
;   pair = wise_pairwise_lite(lb, ind, flux)
;
; INPUTS:
;   lb        - (l,b) coordinates for region of interest
;   ind       - index grid generated by ???
;   flux      - flux grid corresponding to ind
;
; OUTPUTS:
;   pair      - structure (see below)
;
; EXAMPLES:
;   see wise_make_mosaic.pro
;
; COMMENTS:
;   Complete rewrite of previous wise_pairwise_compare.pro.  Now we
;   simply map to a 4096 healpix sphere and compare pixels matched up
;   with matchlist. 
;
; REVISION HISTORY:
;   2011-Dec-01 - Written by Douglas Finkbeiner, CfA
;   2012-Feb-25 - Completely rewritten to use healpix - DPF
;
;----------------------------------------------------------------------
function wise_pairwise_compare, lb, ind, flux, allsky=allsky, w4=w4

  t0 = systime(1)

  if ~ keyword_set(ind) then message, 'pair=wise_pairwise_lite(lb, ind, flux)'

  sz = size(ind, /dimen)
  npsave = sz[0]
  nimage = sz[1]
  maxmatch = long(20)

; -------- read metadata table
  indstr = wise_index_metadata(lb, nimage=nimage, allsky=allsky, w4=w4)
  ntile  = n_elements(indstr) 
  flist  = indstr.fname

; -------- find neighbors of each image
  splog, 'Spherematch'
  spherematch, indstr.ra, indstr.dec, indstr.ra, indstr.dec, 0.375, m1, m2, $
    d12, maxmatch=maxmatch, estnmatch=ntile*maxmatch

  nmat = fltarr(ntile) 

  pair = replicate({ndiff:0, $
                    meddiff: fltarr(maxmatch), $
                    var: fltarr(maxmatch), $
                    ind: lonarr(maxmatch)-1, $
                    totvar: 0., $
                    medvar: 0., $
                    fname: '', $ 
                    npix: lonarr(maxmatch)-1, $ 
                    medflux:0.}, ntile)
  
  pair.fname = flist ; useful to have this info for debugging purposes

  for i=0L, nimage-1 do begin 
     if (i mod 100) EQ 0 then print, i
     
     w1 = where(ind[*, i] GE 0, nw1)
     if nw1 EQ 0 then continue  ; no pixels, must have been an empty file
     indi = ind[w1, i]
     wmatch = where((m1 EQ i) and (m2 ne i), nmatch)
     
     if (nmatch GE 1) then begin

        allvar = fltarr(nmatch)
        jtrue = 0L
        for j=0L, nmatch-1 do begin 
           ii = m2[wmatch[j]]
           matchlist, indi, ind[*, ii], mi, mii ; this step is all the time

           if n_elements(mi) GT 10 then begin  ; demand at least 10 matching pixels
              diff = flux[mii, ii]-flux[mi, i]
              
              ncompare = n_elements(mi) ;number of image values compared
              sind = sort(diff)
              var = $ 
  (diff[sind[floor(0.84*ncompare)]] - diff[sind[floor(0.16*ncompare)]])/2

              allvar[jtrue] = var

              pair[i].meddiff[jtrue] = median(diff)
              pair[i].var[jtrue] = var
              pair[i].ind[jtrue] = ii
              pair[i].npix[jtrue] = ncompare
              jtrue++
           endif 
;           print, i, j, ii, var
           
        endfor
        
        if jtrue GE 1 then begin 
           pair[i].totvar = total(allvar)/jtrue
           pair[i].medvar = median(allvar[0:jtrue-1])
           pair[i].ndiff = jtrue ; not counting self match
           pair[i].medflux = median(flux[w1,i])
        endif 

;        print, i, pair[i].ndiff, pair[i].totvar, pair[i].medvar
     endif
  endfor

  splog, 'Time: ', systime(1)-t0, ' seconds'
  
  return, pair
end
